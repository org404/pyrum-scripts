set -e

host start --identify=true
host notify all
host listen
peer connect $TADDRESS

#
# TODO: try and add description if it affects anything explain
#
# Note: this doesn't seem to work, topic seems to be correct (or at least
#       what prysm would expect), but can't see prysm node id here, when
#       connected. Not sure what to make of it right now.
#                                                      - andrew, March 13 2021
#
# gossip start
#
# topic_name="beacon_block"
# encoding="ssz_snappy"
# blocks_topic="/eth2/$FORK_DIGEST_NO_PREFIX/$topic_name/$encoding"
#
# gossip join --topic=$blocks_topic
# gossip list-peers $blocks_topic
# gossip log $blocks_topic
#

#
# Note: This fixes disconnection issue for Lighthouse (tested for 5 minutes).
#       Although Lighthouse is still syncing during my test, so wrong fork
#       digest issue might be present here. For Prysm it doesn't solve the
#       problem though, see solution below.
#                                                          - andrew, March 13 2021
#
peer metadata serve $TID
peer metadata poll --interval 5s --force-update $TID

#
# This breaks connection to Prysm (??). On Lighthouse doesn't seem to affect anything (??).
#
# peer status serve $TID

#
# This breaks connection to Lighthouse and Prysm.
# Error:
#     beacon-chain[574514]: level=debug msg="Invalid status message from peer" error="wrong fork digest version" handler=status
# Fix: manually set proper fork digest version, see solution below.
#
# peer status poll $TID

#
# This fixes disconnection issue by setting good value for $FORK_DIGEST
# (consequently $FORK_DIGEST_NO_PREFIX, which is fork digest without '0x')
# taken from prysm synced node with simple log.Debug().
#
{
while true; do
    # TODO: find proper data / encode it
    other_data="0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000"
    rpc status req raw --raw --data "$FORK_DIGEST_NO_PREFIX$other_data" --peer-id $TID
    # [DEBUG] Verify connection still opened
    # peer list
    sleep 5s
done
} &  # hack to run block in the background, so we get control over shell despite infinite loop
status_loop_pid=$!  # remember pid of the loop in case we want to kill it

#
# This *should* work now, we are fully connected, and Prysm node thinks we
# are a valid peer (taken a slot, without any forced disconnect).
# Error:
#    beacon-chain[592354]: level=debug msg="Could not decode stream message" error="incorrect size"
# Fix: (??)
#
{
while true; do
    #
    # The following data is a hexdump of the request below:
    #     req := BeaconBlocksByRangeRequest{
    #         StartSlot: types.Slot(20),
    #         Count: 128,
    #         Step: 1
    #     }
    # To log (for example, from inside of Prysm) used the following code:
    #     log.Debugf("BbyR: \"%x\", req)
    #
    # Note: rumor expects "Raw uncompressed hex-encoded request data", which means
    #       the problem is not in the ssz-encoding (hopefully!). But what *is*
    #       the problem then? @Important
    #                                                           - andrew, March 13 2021
    # Data:
    req_data="73746172745f736c6f743a323020636f756e743a31323820737465703a3120"
    #
    # The following data is a full message (ssz encoded) of the request above:
    #     req_data="18ff060000734e61507059011c00004c22a311140000000000000080000000000000000100000000000000"
    # Note:
    #     Can't send this data right now, because "--compression none" flag breaks
    #     everything. Seems like this flag changes url, so setting it to anything
    #     but default removes "/ssz_snappy" prefix. Basically, what we would want
    #     is to keep "/ssz_snappy" url suffix, but skip encoding function and try
    #     sending this as a raw data. Not sure if it will fix anything though,
    #     maybe issue is not in the encoding, but in the data itself.
    #                                                           - andrew, March 14 2021
    #
    # [DEBUG]:
    #     echo "Sending: \"$req_data\""
    #
    rpc blocks-by-range req raw --raw --data "$req_data" --peer-id $TID
    sleep 1s
done
}

